// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Case2.MaRoWo.GarageAdministratie.Infrastructure.Agents.OnderhoudBeheerService
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for OnderhoudBeheerServiceAgent.
    /// </summary>
    public static partial class OnderhoudBeheerServiceAgentExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateOnderhoudCommand'>
            /// </param>
            public static object UpdateOnderhoudsopdracht(this IOnderhoudBeheerServiceAgent operations, UpdateOnderhoudCommand updateOnderhoudCommand = default(UpdateOnderhoudCommand))
            {
                return Task.Factory.StartNew(s => ((IOnderhoudBeheerServiceAgent)s).UpdateOnderhoudsopdrachtAsync(updateOnderhoudCommand), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='updateOnderhoudCommand'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateOnderhoudsopdrachtAsync(this IOnderhoudBeheerServiceAgent operations, UpdateOnderhoudCommand updateOnderhoudCommand = default(UpdateOnderhoudCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateOnderhoudsopdrachtWithHttpMessagesAsync(updateOnderhoudCommand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onderhoudCommand'>
            /// </param>
            public static object AddOnderhoudsopdracht(this IOnderhoudBeheerServiceAgent operations, CreateOnderhoudCommand onderhoudCommand = default(CreateOnderhoudCommand))
            {
                return Task.Factory.StartNew(s => ((IOnderhoudBeheerServiceAgent)s).AddOnderhoudsopdrachtAsync(onderhoudCommand), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onderhoudCommand'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddOnderhoudsopdrachtAsync(this IOnderhoudBeheerServiceAgent operations, CreateOnderhoudCommand onderhoudCommand = default(CreateOnderhoudCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddOnderhoudsopdrachtWithHttpMessagesAsync(onderhoudCommand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onderhoudAfmeldenCommand'>
            /// </param>
            public static object OnderhoudsopdrachtAfmelden(this IOnderhoudBeheerServiceAgent operations, OnderhoudAfmeldenCommand onderhoudAfmeldenCommand = default(OnderhoudAfmeldenCommand))
            {
                return Task.Factory.StartNew(s => ((IOnderhoudBeheerServiceAgent)s).OnderhoudsopdrachtAfmeldenAsync(onderhoudAfmeldenCommand), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onderhoudAfmeldenCommand'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> OnderhoudsopdrachtAfmeldenAsync(this IOnderhoudBeheerServiceAgent operations, OnderhoudAfmeldenCommand onderhoudAfmeldenCommand = default(OnderhoudAfmeldenCommand), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.OnderhoudsopdrachtAfmeldenWithHttpMessagesAsync(onderhoudAfmeldenCommand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
