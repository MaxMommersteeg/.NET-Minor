// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace FrontEnd.Agents
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for CASService.
    /// </summary>
    public static partial class CASServiceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='weeknumber'>
            /// </param>
            /// <param name='year'>
            /// </param>
            public static object ApiV1CursusByYearByWeeknumberGet(this ICASService operations, int weeknumber, int year)
            {
                return Task.Factory.StartNew(s => ((ICASService)s).ApiV1CursusByYearByWeeknumberGetAsync(weeknumber, year), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='weeknumber'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiV1CursusByYearByWeeknumberGetAsync(this ICASService operations, int weeknumber, int year, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1CursusByYearByWeeknumberGetWithHttpMessagesAsync(weeknumber, year, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursuscode'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='day'>
            /// </param>
            public static object ApiV1CursusByCursuscodeByYearByMonthByDayGet(this ICASService operations, string cursuscode, int year, int month, int day)
            {
                return Task.Factory.StartNew(s => ((ICASService)s).ApiV1CursusByCursuscodeByYearByMonthByDayGetAsync(cursuscode, year, month, day), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursuscode'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='day'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiV1CursusByCursuscodeByYearByMonthByDayGetAsync(this ICASService operations, string cursuscode, int year, int month, int day, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiV1CursusByCursuscodeByYearByMonthByDayGetWithHttpMessagesAsync(cursuscode, year, month, day, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursus'>
            /// </param>
            public static object Post(this ICASService operations, Cursus cursus = default(Cursus))
            {
                return Task.Factory.StartNew(s => ((ICASService)s).PostAsync(cursus), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cursus'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAsync(this ICASService operations, Cursus cursus = default(Cursus), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(cursus, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
